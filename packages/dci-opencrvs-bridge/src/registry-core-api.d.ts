/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/registry/search": {
    /**
     * /registry/search
     * @description Search person(s) in registry using identifier or custome attributes
     */
    post: operations["post_reg_search"];
  };
  "/registry/on-search": {
    /**
     * /registry/on-search
     * @description Search results through callback
     */
    post: operations["post_reg_on-search"];
  };
  "/registry/subscribe": {
    /**
     * /registry/subscribe
     * @description Subscribe to a life event with registry
     */
    post: operations["post_reg_subscribe"];
  };
  "/registry/notify": {
    /**
     * /registry/notify
     * @description Registry to notify a life event to subscrbiers
     */
    post: operations["post_reg_notify"];
  };
  "/registry/txn/status": {
    /**
     * /registry/txn/status
     * @description Perform async status check of previous civil registry transanctions using transaction_id and/or reference_id(s)
     */
    post: operations["post_reg_txnstatus"];
  };
  "/registry/txn/on-status": {
    /**
     * /registry/txn/on-status
     * @description Response to async status check of previous civil registrt transanctions using callback
     */
    post: operations["post_reg_on-txnstatus"];
  };
  "/registry/sync/search": {
    /**
     * /registry/sync/search
     * @description Search person(s) in registry using identifier or custome attributes
     */
    post: operations["post_reg_sync_search"];
  };
  "/registry/sync/subscriptions": {
    /**
     * /registry/sync/subscriptions
     * @description To retrive list of subscriptions
     */
    post: operations["post_reg_sync_subscriptions"];
  };
  "/registry/sync/unsubscribe": {
    /**
     * /registry/sync/unsubscribe
     * @description Unsubscribe to a life event with registry
     */
    post: operations["post_reg_sync_unsubscribe"];
  };
  "/registry/sync/txn/status": {
    /**
     * /registry/sync/txn/status
     * @description Perform async status check of previous civil registry transanctions using transaction_id and/or reference_id(s)
     */
    post: operations["post_reg_sync_txnstatus"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Format: ^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+$
     * @description 1. Person id is case insensitve normative represenation as id-type:id@provider <br>
     * 2. This will enumerate foundational and functioanl id's to easily resolvable addressess <br>
     * 3. This property is intended to unambiguously refer to an object, such as a person, beneficiary, user, etc., <br>
     * 4. Few examples: <br>
     *     - id@identifier-type.id-provider e.g token:12345@mosip, vid:543215@mosip <br>
     *     - id@civil-registry.issuing-agency e.g id:12345@crvs, brn:12345@crvs, mrn:12345@crvs <br>
     *     - id@functional-identifier.issuing-agency e.g id:12345@voter-id, id:12345@driving-license, mobile:12345@farmer-reg <br>
     * Note: id provider should be made configurable and solutions should adapt to the local jurisdiction and policies.
     *
     * @example vid:54321@mosip
     */
    cdpi_PersonId: string;
    /**
     * @description An identifier type includes unique numbers legally assigned to individuals. <br>
     * Reference: [Types of ID](https://id4d.worldbank.org/guide/types-id-systems)
     *
     * UIN : Unique Identification Number <br>
     * BRN : Birth Registration Number or Birth Serial Number <br>
     * MRN : Marriage Registration Number <br>
     * DRN : Death Registration Number <br>
     *
     * @enum {string}
     */
    dci_IdentifierType: "UIN" | "BRN" | "MRN" | "DRN";
    dci_IdentifierTypeValue: {
      identifier_type?: components["schemas"]["dci_IdentifierType"];
      /** @description Value of the identifier */
      identifier_value?: string;
    };
    /**
     * @description Marital status reference database: Standardized codes/values representing different marital status categories <br>
     * Reference: [FHIR Marital Status](https://hl7.org/fhir/DSTU2/valueset-marital-status.html)<br>
     *
     * Code : Values - Description <br>
     * S : Never Married - No marriage contract has ever been entered <br>
     * M : Married - A current marriage contract is active <br>
     * W : Widow - The spouse has died <br>
     * A : Annulled - Marriage contract has been declared null and to not have existed <br>
     * D : Divorced - Marriage contract has been declared dissolved and inactive <br>
     * L : Legally Separated - Legally Separated <br>
     * U : Unmarried - The person is not presently married. The marital history is not known or stated. <br>
     *
     * @enum {string}
     */
    dci_MaritalStatus: "S" | "M" | "W" | "A" | "D" | "L" | "U";
    /**
     * @description The name data object represents a person's name with various components. <br>
     * Reference: [FHIR XPN - extended person name](https://v2plus.hl7.org/2021Jan/data-type/XPN.html#XPN-1) <br>
     * Note: Note: In some cultures, people can have multiple Surname(s), Given name(s), Second name(s), Suffix(s), or Prefix(s) to their name; all can be present in the respective attributes, being separated by separator character like space or /.
     */
    dci_Name: {
      /** @description Surname(s) or last name(s) of the applicant */
      sur_name?: string;
      /** @description Given name(s) or first name(s) of the applicant */
      given_name?: string;
      /** @description Second name(s) or middle name(s) of the applicant */
      second_name?: string;
      /** @description Suffix part of the applicant's name */
      suffix?: string;
      /** @description Prefix part of the applicant's name */
      prefix?: string;
    };
    /**
     * @description 1. Attributes of a person to create fetch records, create verifiable credentials or use in search criteria.
     * 3. Allowes Country/Registry specific implementation extensions using Attribute Name/Value pairs.
     */
    dci_PersonRecord: {
      identifier_type?: components["schemas"]["dci_IdentifierType"];
      /** @description Value of the identifier */
      identifier?: string;
      name?: components["schemas"]["dci_Name"];
      /** @description Applicant preferred phone number as in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I/en) */
      phone_number?: string;
      /** @description Applicant preferred e-mail address as in [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322) [addr-spec](https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1) [specification](https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1) */
      email?: string;
      sex?: components["schemas"]["dci_Sex"];
      /** @description Represents Date and time of the applicant's birth as in [ISO 8601](https://www.iso.org/standard/40874.html) */
      birthdate?: string;
      birthplace?: components["schemas"]["openid_Address"];
      deathdate?: components["schemas"]["DateTime"];
      deathplace?: components["schemas"]["openid_Address"];
      address?: components["schemas"]["openid_Address"];
      marital_status?: components["schemas"]["dci_MaritalStatus"];
      marriagedate?: components["schemas"]["DateTime"];
      divorcedate?: components["schemas"]["DateTime"];
      parent1_identifier?: {
        identifier_type?: components["schemas"]["dci_IdentifierType"];
        /** @description Value of the identifier */
        identifier?: string;
      };
      parent2_identifier?: {
        identifier_type?: components["schemas"]["dci_IdentifierType"];
        /** @description Value of the identifier */
        identifier?: string;
      };
    };
    /**
     * @description Predefined registry record to return in respone as object
     *
     * @enum {string}
     */
    dci_RecordType: "person" | "other";
    /**
     * @description Standardized codes/values representing diverse Sex categories.
     * Reference: [ISO/IEC 5218:2022](https://www.iso.org/standard/81682.html)
     *
     * 1 : Male
     * 2 : Female
     * 3 : Others
     * 4 : Unknown
     *
     * @enum {string}
     */
    dci_Sex: "1" | "2" | "3" | "4";
    /**
     * @description Standardized codes/values represent vital events in an individual's life.
     * Reference: [Vital Events Statistics](https://mospi.gov.in/sites/default/files/publication_reports/vital_statistics_2010_0.pdf)<br>
     * 1 : Live Birth <br>
     * 2 : Death <br>
     * 3 : Fetal death <br>
     * 4 : Marriage <br>
     * 5 : Divorce <br>
     * 6 : Adoption <br>
     *
     * @enum {string}
     */
    dci_VitalEvents: "1" | "2" | "3" | "4" | "5" | "6";
    /** @description Refer [Plus Codes](https://github.com/google/open-location-code/wiki/Plus-codes-API) for more details */
    GooglePlusCode: {
      /** @example */
      global_code?: string;
      geometry?: {
        bounds?: {
          northeast?: components["schemas"]["LatLong"];
          southwest?: components["schemas"]["LatLong"];
        };
        location?: components["schemas"]["LatLong"];
      };
    };
    /**
     * @description Standardized codes/values represent key events to [integrate](https://docs.mosip.io/1.2.0/integrations/mosip-opencrvs-integration#scope) with civil registries. <br><br>
     * **Sample flow to explain birth registration between MOSIP and CRVS systems:**
     * 1. Step 1: MOSIP subscribes to BIRTH_REGISTERED event with CRVS for RegistrationRecord
     * 2. Step 2: CRVS subscribes to BIRTH_REGISTERED event with MOSIP for MOSIPVerifiableCredential
     * 3. Step 3: CRVS notifies RegistrationRecord data to MOSIP
     * 4. Step 4: MOSIP notifies MOSIPVerifiableCredential data to CRVS <br>
     *
     * **Sample flow to explain data modification (push) flow from MOSIP to CRVS systems:**
     *   1. Step 1: CRVS subscribes to DATA_MODIFICATION event with MOSIP for MOSIPToken data
     *   2. Step 2: MOSIP notifies MOSIPToken data to CRVS<br>
     *
     * **Note:**
     * 1. Data modifiation (pull) flow can be accomodated with sync/search or existing mosip's eKyc auth api.
     * 2. Death, Death Reversal fllows same pattern as described in for birth registration.
     *
     * @enum {string}
     */
    mosip_EventType:
      | "BIRTH_REGISTERED"
      | "DEATH_REGISTERED"
      | "DEATH_REVERSAL"
      | "DATA_MODIFICATION";
    /** @description multi language value object */
    mosip_LangaugeValue: {
      /** @example eng */
      langugage?: string;
      /** @example value */
      value?: string;
    };
    mosip_LanguageValueList: components["schemas"]["mosip_LangaugeValue"][];
    /** @description MOSIP Verifiable Credential for a [person](https://github.com/opencrvs/mosip-mediator/blob/master/samples/decrypted-sample-received-credentials.json) */
    mosip_MOSIPVerifiableCredential: {
      issuedTo?: string;
      protectedAttributes?: string[];
      /** @description MOSIP Verifiable Credential for Proof of identity */
      credentialSubject?: {
        gender?: components["schemas"]["mosip_LanguageValueList"];
        city?: components["schemas"]["mosip_LanguageValueList"];
        /** @example 14022 */
        postalCode?: string;
        /** @example Thirteen Mosip */
        fullName?: string;
        /** @example 2022 */
        dateOfBirth?: string;
        province?: components["schemas"]["mosip_LanguageValueList"];
        /** @example 9898989898 */
        phone?: string;
        addressLine1?: components["schemas"]["mosip_LanguageValueList"];
        addressLine2?: components["schemas"]["mosip_LanguageValueList"];
        /** @example 2835824850916304 */
        id?: string;
        /** @example 7346597054 */
        UIN?: string;
        region?: components["schemas"]["mosip_LanguageValueList"];
        /** @example thirteen.mosip.123@mailinator.com */
        email?: string;
      };
      /** @example http://mosip.io/credentials/e2039315-87b0-4012-942e-e0d7c879994b */
      id?: string;
      type?: string[];
      consent?: string;
      /** @example https://mosip.io/issuers/ */
      issuer?: string;
    };
    /**
     * @description Predefined registry record to return in respone as object
     *
     * @enum {string}
     */
    mosip_RecordType: "RegistrationRecord" | "MOSIPVerifiableCredential";
    /** @description Birth Registration record to sync with MOSIP. [Reference](https://github.com/mosip/mosip-opencrvs/blob/develop/mediator/src/main/java/io/mosip/opencrvs/dto/SyncDto.java) */
    mosip_RegistrationRecord: {
      registrationId?: string;
      packetId?: string;
      additionalInfoReqId?: string;
      name?: string;
      email?: string;
      phone?: string;
      registrationType?: string;
      packetHashValue?: string;
      packetSize?: number;
      supervisorStatus?: string;
      supervisorComment?: string;
      opentionalValues?: string[];
      langCode?: string;
      createDateTime?: components["schemas"]["DateTime"];
      updateDateTime?: components["schemas"]["DateTime"];
      deletedDateTime?: components["schemas"]["DateTime"];
      isActive?: boolean;
      isDeleted?: boolean;
    };
    /** @description Deceased record obtainable from registries */
    nid_DeceasedRecord: {
      /** @description unique reference number mantained in the registry for recording death record or */
      reference_number?: string;
      /** @description End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences. */
      name?: string;
      /** @description End-User's gender. Values defined by this specification are female, male, transgender. */
      gender?: string;
      /** @description Date of Birth in DDMMYYYY format */
      dob?: string;
      /** @description Date of Death in DDMMYYYY format */
      dod?: string;
      /** @description Date in DDMMYYYY format to record on which the death incident reported */
      reported_date?: string;
      /** @description whether demo check has been undertaken or not */
      demo_check_status?: boolean;
      /** @description Date in DDMMYYYY format to capture the Demo Check Date */
      demo_check_date?: string;
      /** @description Reference document collected for registering the deceased information */
      document?: components["schemas"]["nid_Document"];
    };
    /** @description Supporting document of the Resident */
    nid_Document: {
      /** @description Name of the document */
      document_name?: string;
      /** @description Bases 64 encoded document */
      document?: string;
    };
    /** @description eKYC details of the resident */
    nid_EKycDetails: {
      /** @description Date on which eKYC has been done. A null value indicates that eKYC has not been undertaken */
      ekyc_date?: string;
    };
    /**
     * @description Predefined registry record to return in respone as object
     *
     * @enum {string}
     */
    nid_RecordType: "resident_record" | "deceased_record";
    /** @description Address of the Resident in English Language */
    nid_ResidentAddress: {
      /** @description Care of information */
      care_of?: string;
      /** @description Building identity */
      building?: string;
      /** @description Street details */
      street?: string;
      /** @description Landmark details */
      landmark?: string;
      /** @description Pincode */
      pincode?: string;
      /** @description Post office name */
      "po-name"?: string;
      /** @description Village Town City Code */
      vtc?: string;
      /** @description Village/Town/City Name */
      "vtc-name"?: string;
      /** @description Sub District Name */
      "sub-district-name"?: string;
      /** @description District Name */
      "district-name"?: string;
      /** @description State Name */
      state?: string;
      /** @description Country Name */
      country?: string;
    };
    /** @description Resident Local Address */
    nid_ResidentLocalAddress: {
      /** @description Care of information in local language */
      "local-careof"?: string;
      /** @description Building information in local language */
      "local-building"?: string;
      /** @description Street information in local language */
      "local-street"?: string;
      /** @description Landmark information in local language */
      "local-landmark"?: string;
      /** @description locality information in local language */
      "local-locality"?: string;
      /** @description pincode */
      pincode?: string;
      /** @description Post office name in local */
      "po-name-local"?: string;
      /** @description vtc information in local language */
      "local-vtc"?: string;
      /** @description Sub district information in local language */
      "local-subdistrict"?: string;
      /** @description district information in local language */
      "local-district"?: string;
      /** @description State information in local language */
      "local-state"?: string;
      /** @description Country information in local language */
      "local-country"?: string;
    };
    /** @description Resident Local Name */
    nid_ResidentLocalName: {
      language_code?: components["schemas"]["LanguageCode"];
      /** @description Local name of the Resident */
      local_name?: string;
    };
    /** @description Resident Nationality Information */
    nid_ResidentNationality: {
      /** @description Nationality information of the Resident */
      nationality?: string;
      /** @description Passport number of the Resident */
      passport_number?: string;
      /** @description Passport validity date in DDMMYYYY format */
      passport_valid_upto?: string;
      /** @description Visa number of the Resident */
      visa_number?: string;
      /** @description Visa validity details */
      visa_vald_upto?: string;
      /** @description OCI card deatils */
      oci_number?: string;
      /** @description OCI Validity date in DDMMYYYY format */
      oci_valid_upto?: string;
    };
    /** @description Resident Photo */
    nid_ResidentPhoto: {
      /** @description Photo encoded as Base64 string */
      photo?: string;
    };
    /** @description Resident Information */
    nid_ResidentRecord: {
      /** @description End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences. */
      name?: string;
      /** @description End-User's gender. Values defined by this specification are female, male, transgender. */
      gender?: string;
      /** @description Date of Birth in DDMMYYYY format */
      dob?: string;
      /** @description Date of Birth Type i.e Declared, Approximate, Verified */
      dob_type?: string;
      /** @description Phone number of the resident. If the number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678. */
      phone?: string;
      /** @description End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7. */
      email?: string;
      address?: components["schemas"]["nid_ResidentAddress"];
      local_name?: components["schemas"]["nid_ResidentLocalName"];
      local_address?: components["schemas"]["nid_ResidentLocalAddress"];
      /** @description Image encoded as Base64 string */
      photo?: components["schemas"]["nid_ResidentPhoto"];
      /** @description Nationality information of the Resident */
      nationality?: components["schemas"]["nid_ResidentNationality"];
      /** @description ekyc Details undertaken by the Resident */
      kyc_status?: components["schemas"]["nid_EKycDetails"];
      /** @description Document encoded as Base64 string */
      document?: components["schemas"]["nid_Document"];
    };
    /**
     * Address
     * @description Address info as per OpenID <a href="https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim">specs</a>
     */
    openid_Address: {
      /**
       * @description Full mailing address, formatted for display or use on a mailing label. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair ("\r\n") or as a single line feed character ("\n").
       * @example
       */
      address_line1?: string;
      /**
       * @description Full street address component, which MAY include house number, street name, Post Office Box, and multi-line extended street address information. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair ("\r\n") or as a single line feed character ("\n").
       * @example
       */
      address_line_2?: string;
      /**
       * @description City or locality component.
       * @example
       */
      locality?: string;
      /** @description District or sub-regional code */
      sub_region_code?: string;
      /**
       * @description State, province, prefecture, or region component.
       * @example
       */
      region_code?: string;
      /**
       * @description Zip code or postal code component.
       * @example
       */
      postal_code?: string;
      /**
       * @description Country part of an address represented using an ISO 3-letter code [ISO3166-3], e.g., "USA" or "JPN". 2-letter ISO codes [ISO3166-1] e.g. ,e.g. US, JP
       * @example
       */
      country_code?: string;
      /** @description Refer [Plus Codes](https://github.com/google/open-location-code/wiki/Plus-codes-API) for more details */
      geo_location?:
        | components["schemas"]["LatLong"]
        | components["schemas"]["GooglePlusCode"];
    };
    /**
     * @description 1. Attributes of a person to create fetch records, create verifiable credentials or use in search criteria.
     * 2. Allowes Country/Registry specific implementation extensions using Attribute Name/Value pairs.
     * 3. Person info as per OpenID [Claims](https://openid.net/specs/openid-connect-core-1_0.html#Claims)
     * 4. Person additional info based on OpenID [name-additional-claims](https://openid.net/specs/openid-connect-4-identity-assurance-1_0-13.html#name-additional-claims-about-end)
     */
    openid_PersonRecord: {
      /** @description Subject - Identifier for the End-User at the Issuer. */
      sub?: string;
      /** @description End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences. */
      name?: string;
      /** @description Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters. */
      given_name?: string;
      /** @description Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters. */
      family_name?: string;
      /** @description Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used. */
      middle_name?: string;
      /** @description Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael. */
      nickname?: string;
      /** @description Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace. The RP MUST NOT rely upon this value being unique, as discussed in */
      preferred_username?: string;
      /** @description URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User. */
      profile?: string;
      /** @description URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User. */
      picture?: string;
      /** @description URL of the End-User's Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with. */
      website?: string;
      /** @description End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7. */
      email?: string;
      /** @description address was controlled by the End-User at the time the verification was performed. The means by which an e-mail address is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. */
      email_verified?: boolean;
      /** @description End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable. */
      gender?: string;
      /** @description YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates. */
      birthdate?: string;
      /** @description End-User's place of birth. The value of this member is a JSON structure containing some or all of the following members */
      place_of_birth?: Record<string, never>;
      /** @description YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates. */
      deathdate?: string;
      /** @description End-User's place of birth. The value of this member is a JSON structure containing some or all of the following members */
      place_of_death?: Record<string, never>;
      /** @description number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678. */
      phone_number?: string;
      /** @description True if the End-User's phone number has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format. */
      phone_number_verified?: string;
      address?: components["schemas"]["openid_Address"];
      /** @description String from zoneinfo [zoneinfo] time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles. */
      zoneinfo?: string;
      /** @description Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well. */
      locale?: string;
      /** @description End-User's nationalities using ICAO 3-letter codes [ICAO-Doc9303], e.g., "USA" or "JPN". 2-letter ICAO codes MAY be used in some circumstances for compatibility reasons. */
      nationalities?: string[];
      /** @description Time the End-User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time */
      updated_at?: number;
      /** @description End-User's family name(s) when they were born, or at least from the time they were a child. This term can be used by a person who changes the family name later in life for any reason. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters. */
      birth_family_name?: string;
      /** @description End-User's given name(s) when they were born, or at least from the time they were a child. This term can be used by a person who changes the given name later in life for any reason. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters. */
      birth_given_name?: string;
      /** @description End-User's middle name(s) when they were born, or at least from the time they were a child. This term can be used by a person who changes the middle name later in life for any reason. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used. */
      birth_middle_name?: string;
      /** @description End-User's salutation, e.g., "Mr." */
      salutation?: string;
      /** @description End-User's title, e.g., "Dr." */
      title?: string;
      /** @description End-User's mobile phone number formatted according to ITU-T recommendation [E.164], e.g., "1999550123" */
      msisdn?: string;
      /** @description Stage name, religious name or any other type of alias/pseudonym with which a person is known in a specific context besides its legal name. This must be part of the applicable legislation and thus the trust framework (e.g., be an attribute on the identity card). */
      also_known_as?: string;
      additional_attributes?: components["schemas"]["AttributeNameValueList"];
    };
    /**
     * @description 1. Person document detials as per OpenID [identity-assurance](https://openid.net/specs/openid-connect-4-identity-assurance-1_0-13.html#name-evidence-element)
     * 2. JSON object representing the document used to perform the identity verification.
     */
    openid_PersonDocDetails: {
      /** @description String denoting the type of the document. The OP MAY use other than the predefined values in which case the RPs will either be unable to process the assertion, just store this value for audit purposes, or apply bespoken business logic to it. */
      type: string;
      /** @description String Representing an identifier/number that uniquely identifies a document that was issued to the End-User. This is used on one document and will change if it is reissued, e.g., a passport number, certificate number, etc. Note, number can be used as an alias for 'document_number' for backward compatibility purposes but will be deprecated in future releases, implementers are recommended to use document_number. */
      document_number?: string;
      /** @description String representing an identifier that is assigned to the End-User and is not limited to being used in one document, for example a national identification number, personal identity number, citizen number, social security number, driver number, account number, customer number, licensee number, etc. */
      personal_number?: string;
      /** @description String representing an identifier/number that identifies the document irrespective of any personalization information (this usually only applies to physical artifacts and is present before personalization). */
      serial_number?: string;
      /** @description The date the document was issued as ISO 8601 [ISO8601] YYYY-MM-DD format. */
      date_of_issuance?: string;
      /** @description The date the document will expire as ISO 8601 [ISO8601] YYYY-MM-DD format. */
      date_of_expiry?: string;
      /** @description JSON object containing information about the issuer of this document. This object consists of the following properties */
      issuer?: {
        /** @description Designation of the issuer of the document */
        name?: string;
        address?: components["schemas"]["openid_Address"];
        /** @description String denoting the country or supranational organization that issued the document as ISO 3166/ICAO 3-letter codes [ICAO-Doc9303], e.g., "USA" or "JPN". 2-letter ICAO codes MAY be used in some circumstances for compatibility reasons. */
        country_code?: string;
        /** @description String containing the name of the region(s)/state(s)/province(s)/municipality(ies) that issuer has jurisdiction over (if this information is not common knowledge or derivable from the address). */
        jurisdiction?: string;
      };
    };
    /**
     * @description 1. Civil registration event list used to record and interact with a typical civil registry
     * 2. This is an indicative list as reference and every country, organisation, system shall customise to local requirements as extensions
     * 3. Example Civil Registration events: person, birth, death, marriage, divorce, annulment, seperation, adoption, demo_change, unregister, etc.,
     *
     * @example [
     *   "person",
     *   "birth",
     *   "death",
     *   "marriage",
     *   "divorce",
     *   "annulment",
     *   "seperation",
     *   "adoption",
     *   "demo_change",
     *   "unregister"
     * ]
     */
    civilReg_EventType: string;
    /**
     * @description 1. A sample person record to identity an individual or civil regisration event in a typical civil registry
     * 2, This is an indicative list as reference and every country, organisation, system shall customise to local requirements as extensions
     */
    civilReg_PersonRecord: components["schemas"]["openid_PersonRecord"] & {
      /** Format: date-time */
      issue_date?: string;
      /** @description Civil registry status */
      status?: string;
      registration_type?: components["schemas"]["civilReg_EventType"];
      /** @description Registration number */
      registration_number?: string;
      /** @description Registration date */
      registration_date?: unknown;
      /** @description Registration number to related record. e.g birth registration no for death, marriage registration no for divorce/annulment, etc., */
      link_registration_number?: string;
      related_persons?: components["schemas"]["civilReg_RelatedPerson"][];
    };
    /**
     * @description 1. A sample record list to identity various records that civil registry can produce
     * 2, This is an indicative list as reference and every country, organisation, system shall customise to local requirements as extensions
     * 3. Example Civil Registry records - person_record, birth_cert, death_cert, marriage_cert, etc.,
     *
     * @example [
     *   "person_record",
     *   "brith_cert",
     *   "death_cert",
     *   "marriage_cert",
     *   "other_record"
     * ]
     */
    civilReg_RecordType: string;
    /**
     * @description 1. A sample related person into captured in civil registry
     * 2, This is an indicative list as reference and every country, organisation, system shall customise to local requirements as extensions
     */
    civilReg_RelatedPerson: {
      /** @description Subject - Identifier for the End-User at the Issuer. */
      sub?: string;
      /** @description End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences. */
      name?: string;
      /**
       * @description Indicative relationship values - mother, father, gaurdian, bride, groom, wife, husband, spouse, partner, other
       *
       * @example [
       *   "mother",
       *   "father",
       *   "gaurdian",
       *   "bride",
       *   "groom",
       *   "wife",
       *   "husband",
       *   "spouse",
       *   "partner",
       *   "other"
       * ]
       */
      relationship?: string;
    };
    /**
     * @description 1. List of all events type defined by respective registries, entities, coutnries and organisation as extensions
     * 2. Events can be used for defining custom selection criteria with in the context of registry domain
     */
    coreReg_AllEvents:
      | components["schemas"]["dci_VitalEvents"]
      | components["schemas"]["civilReg_EventType"]
      | components["schemas"]["mosip_EventType"]
      | components["schemas"]["coreReg_EventType"];
    /**
     * @description 1. Pre defined query objects injected by each country/org/system to query a registry
     * 2. Implementing systems may create pre-defined query objects based on use cases and inject as custom extensions
     * 3. ExpressionWithConditionList is simple generic search query construct to solve for majority of search conditons. few examples: <br>
     *   - search or subscribe to update events; e.g any updates in postal_code 12345 between 1/jan/2020 and 31/dec/2020
     *   - search or subscribe to birth, death events; e.g any new birth in postal_code 12345 after 1/jan/2023
     *   - search all farmers with land area less than 2 acers in district code 504
     */
    coreReg_AllQueries:
      | components["schemas"]["dci_IdentifierTypeValue"]
      | components["schemas"]["cdpi_PersonId"]
      | components["schemas"]["ExpressionWithConditionList"];
    /**
     * @description 1. Records retured as response to search/subsribe actions to exchange registry data
     * 2. record_type acts as namespace to define record being retunred for receiving system to unmarshel and use
     * 3. Objects are defined in respecitive schemas definition with entity/org namespace as prefix
     * 3. Implementing systems shall reference to the requires objects based on the context of these API usage
     */
    coreReg_AllRecords:
      | components["schemas"]["civilReg_PersonRecord"]
      | components["schemas"]["dci_PersonRecord"]
      | components["schemas"]["nid_ResidentRecord"]
      | components["schemas"]["nid_DeceasedRecord"]
      | components["schemas"]["mosip_RegistrationRecord"]
      | components["schemas"]["mosip_MOSIPVerifiableCredential"];
    /**
     * @description 1. RecordType are pre defined as list of attributes or an object to return upon successful search/subscribe requests
     * 2. This is equivalent to column list in a typical sql query i.e select col1, col2, col3 from table where condition
     * 3. Based on record_type, required object definition are added as extension payloads
     */
    coreReg_AllRecordTypes:
      | components["schemas"]["civilReg_RecordType"]
      | components["schemas"]["dci_RecordType"]
      | components["schemas"]["nid_RecordType"]
      | components["schemas"]["mosip_RecordType"]
      | components["schemas"]["other_RecordType"];
    /**
     * @description Functional registry event types:
     *   1. update - search or subscribe to update events; e.g update to postal_code 12345 between date_range
     *   2. link - search or subscribe to linking events; e.g mobile no link with ID, national ID link with civil reg record, etc.,
     *   3. unlink - search or subscribe to unlinking events; <br>
     *
     * Note: update event can also cover link/unlink events on a registry record.
     *
     * @enum {string}
     */
    coreReg_EventType: "update" | "link" | "unlink";
    /** @description Fetch list of active subscriptions based on sender id,registry type and event type */
    FetchSubscriptionsRequest: {
      transaction_id: components["schemas"]["TransactionId"];
      fetch_subscriptions_request?: {
        timestamp: components["schemas"]["DateTime"];
        registry_type?: components["schemas"]["coreReg_Type"];
        event_type: components["schemas"]["coreReg_AllEvents"];
        subscription_code?: components["schemas"]["SubscriptionCode"];
        locale?: components["schemas"]["LanguageCode"];
      };
    };
    /** @description Subscription list */
    FetchSubscriptionsResponse: {
      transaction_id: components["schemas"]["TransactionId"];
      timestamp?: components["schemas"]["DateTime"];
      subscriptions: components["schemas"]["SubscriptionInfo"][];
    };
    /** @description Registry to notify a event to subscrbiers */
    NotifyEventRequest: {
      transaction_id: components["schemas"]["TransactionId"];
      notify_event: {
        reference_id: components["schemas"]["ReferenceId"];
        timestamp: components["schemas"]["DateTime"];
        registry_type?: components["schemas"]["coreReg_Type"];
        event_type: components["schemas"]["coreReg_AllEvents"];
        /** @description Search result record as an outcome of search/subscribe action */
        registry_data: {
          record_type: components["schemas"]["coreReg_AllRecordTypes"];
          record: components["schemas"]["coreReg_AllRecords"];
        };
        locale?: components["schemas"]["LanguageCode"];
      }[];
    };
    other_RecordType: string[];
    /**
     * @description 1. Country specific implementations should extend and allow other registries.
     * 2. In most scenarios, receiver i.e receipient of search/subsribe request determine which registry is being searched
     * 3. example: civil, population, national-id, family, household, social, beneficiary, disability, student, farmer, land, utiltiy, other
     *
     * @example [
     *   "civil",
     *   "population",
     *   "national-id",
     *   "family",
     *   "household",
     *   "social",
     *   "beneficiary",
     *   "disability",
     *   "student",
     *   "farmer",
     *   "land",
     *   "utility",
     *   "other"
     * ]
     */
    coreReg_Type: string;
    /**
     * @description 1. Functional registry specific extension to search.
     * 2. Additional checks using conditioanl expressions is possible.
     * 3. Allows Country/Registry specific implementation extensions using key/value pairs.
     */
    SearchRequest: {
      transaction_id: components["schemas"]["TransactionId"];
      search_request: {
        reference_id: components["schemas"]["ReferenceId"];
        timestamp: components["schemas"]["DateTime"];
        registry_type?: components["schemas"]["coreReg_Type"];
        event_type: components["schemas"]["coreReg_AllEvents"];
        search_criteria: {
          query: components["schemas"]["coreReg_AllQueries"];
          record_type: components["schemas"]["coreReg_AllRecordTypes"];
          sort?: components["schemas"]["SearchSortList"];
          pagination?: components["schemas"]["PaginationRequest"];
        };
        consent?: components["schemas"]["Consent"];
        locale?: components["schemas"]["LanguageCode"];
      }[];
    };
    /** @description Response to search request. Multiple repsonses for each page can be pushed to the caller as an implementation! */
    SearchResponse: {
      transaction_id: components["schemas"]["TransactionId"];
      search_response: {
        reference_id: components["schemas"]["ReferenceId"];
        timestamp: components["schemas"]["DateTime"];
        status: components["schemas"]["RequestStatus"];
        status_reason_code?: components["schemas"]["SearchStatusReasonCode"];
        /** @description Status reason code message. Helps actionanble messaging for systems/end users */
        status_reason_message?: string;
        registry_type?: components["schemas"]["coreReg_Type"];
        event_type: components["schemas"]["coreReg_AllEvents"];
        /** @description Search result record as an outcome of search/subscribe action */
        registry_data?: {
          record_type: components["schemas"]["coreReg_AllRecordTypes"];
          record: components["schemas"]["coreReg_AllRecords"];
        };
        pagination?: components["schemas"]["Pagination"];
        locale?: components["schemas"]["LanguageCode"];
      }[];
    };
    /**
     * @description Identity verification request status reason codes
     * @enum {string}
     */
    SearchStatusReasonCode:
      | "rjct.reference_id.invalid"
      | "rjct.reference_id.duplicate"
      | "rjct.timestamp.invalid"
      | "rjct.search_criteria.invalid"
      | "rjct.filter.invalid"
      | "rjct.sort.invalid"
      | "rjct.pagination.invalid"
      | "rjct.search.too_many_records_found";
    /** @description Subscribe to a life event with crvs */
    SubscribeRequest: {
      transaction_id: components["schemas"]["TransactionId"];
      subscribe_request: {
        reference_id: components["schemas"]["ReferenceId"];
        timestamp: components["schemas"]["DateTime"];
        registry_type?: components["schemas"]["coreReg_Type"];
        event_type: components["schemas"]["coreReg_AllEvents"];
        frequency?: components["schemas"]["EventFrequency"];
        subscribe_criteria: {
          query: components["schemas"]["coreReg_AllQueries"];
          record_type: components["schemas"]["coreReg_AllRecordTypes"];
        };
        locale?: components["schemas"]["LanguageCode"];
      }[];
    };
    /**
     * @description Identity verification request status reason codes
     * @enum {string}
     */
    SubscribeStatusReasonCode:
      | "rjct.reference_id.invalid"
      | "rjct.reference_id.duplicate"
      | "rjct.timestamp.invalid"
      | "rjct.notify_types.invalid"
      | "rjct.notify_details.invalid"
      | "rjct.person_id.invalid"
      | "rjct.event.already_subscribed";
    /**
     * @description Unique code to ideintiy the subscription request by the entity providing subscription service.
     * Helps to check status, unsubscribe etc.,
     */
    SubscriptionCode: string;
    SubscriptionInfo: {
      subscription_code: components["schemas"]["SubscriptionCode"];
      timestamp: components["schemas"]["DateTime"];
      registry_type?: components["schemas"]["coreReg_Type"];
      event_type: components["schemas"]["coreReg_AllEvents"];
      frequency?: components["schemas"]["EventFrequency"];
      subscribe_criteria: {
        query: components["schemas"]["coreReg_AllQueries"];
        record_type?: components["schemas"]["coreReg_AllRecordTypes"];
      };
      locale?: components["schemas"]["LanguageCode"];
    };
    /**
     * @description subscription status
     * @enum {string}
     */
    SubscriptionStatus: "subscribe" | "unsubscribe";
    /** @description Request to search identity service requests */
    TxnStatusRequest: {
      transaction_id: components["schemas"]["TransactionId"];
      txnstatus_request: {
        reference_id: components["schemas"]["ReferenceId"];
        /** @enum {string} */
        search_type: "transaction_id" | "reference_id_list";
        search_attribute:
          | components["schemas"]["TransactionId"]
          | components["schemas"]["ReferenceIdList"];
        locale?: components["schemas"]["LanguageCode"];
      };
    };
    TxnStatusResponse: {
      transaction_id: components["schemas"]["TransactionId"];
      /**
       * @example {
       *   "txnstatus_response": {
       *     "reference_id": "test",
       *     "status": "SUCC"
       *   }
       * }
       */
      txnstatus_response:
        | components["schemas"]["SearchResponse"]
        | components["schemas"]["NotifyEventRequest"];
    };
    /** @description Un-Subscribe to a life event with crvs */
    UnSubscribeRequest: {
      transaction_id: components["schemas"]["TransactionId"];
      timesstamp?: components["schemas"]["DateTime"];
      subscription_codes?: components["schemas"]["SubscriptionCode"][];
    };
    /** @description Un-Subscribe to a life event with crvs */
    UnSubscribeResponse: {
      transaction_id: components["schemas"]["TransactionId"];
      timesatmp?: components["schemas"]["DateTime"];
      status: components["schemas"]["RequestStatus"];
      status_reason_code?: components["schemas"]["UnSubscribeStatusReasonCode"];
      /** @description Status reason code message. Helps actionanble messaging for systems/end users */
      status_reason_message?: string;
      subscription_status?: {
        subscription_code: components["schemas"]["SubscriptionCode"];
        subscription_status: components["schemas"]["SubscriptionStatus"];
      }[];
    };
    /**
     * @description Identity verification request status reason codes
     * @enum {string}
     */
    UnSubscribeStatusReasonCode:
      | "rjct.reference_id.invalid"
      | "rjct.reference_id.duplicate"
      | "rjct.timestamp.invalid"
      | "rjct.subscription_code.invalid"
      | "rjct.requester.invalid"
      | "rjct.event.already_unsubscribed";
    /**
     * @description 1. ACK: If the request is valid (for basic checks) and async callback (i.e webhook) will be invoked by reciever back to the sender.
     * 2. NACK: If the request is valid (for basic checks) and there is no futher updates from reciever back to the sender.
     * 3. ERR: If the reuqest is invalid and reciver can't process the request. error object holds error code, message.
     *
     * @enum {string}
     */
    Ack: "ACK" | "NACK" | "ERR";
    /** @description Additional JSON property oject to hold custom user defined contextual data */
    AdditionalInfo: Record<string, never>;
    /** @description Attribute name value object */
    AttributeNameValue: {
      /** @example phone_number */
      name: string;
      value: components["schemas"]["AttributeValue"];
    };
    /** @description List of attribute Name/Value */
    AttributeNameValueList: components["schemas"]["AttributeNameValue"][];
    /** @example +91 9876543210 */
    AttributeValue: unknown;
    /** @description Consent artefact. TODO - enrich consent object! */
    Consent: {
      /**
       * Format: uri or did
       * @description consent id
       */
      id?: string;
      ts?: components["schemas"]["DateTime"];
      purpose?: {
        text?: string;
        /** @description From a fixed set, documented at refUri */
        code?: string;
        /**
         * Format: uri
         * @description Uri to provide more info on consent codes
         */
        refUri?: string;
      };
    };
    /**
     * Format: date-time
     * @description 1. All dates and timestamps are represented in [ISO 8601](https://www.iso.org/standard/40874.html) format including timezone - e.g 2022-12-04T17:20:07-04:00.
     *
     * @example
     */
    DateTime: string;
    /** @description Encrypted payload */
    EncryptedMessage: {
      header: {
        /** @description The JWE algorithm used for encryption */
        alg: string;
        /** @description The encryption algorithm used for encrypting the plaintext */
        enc: string;
        /** @description The key identifier for the encryption key */
        kid: string;
      };
      /** @description This is the result of encrypting the plaintext using the CEK and the IV. It's Base64Url-encoded. */
      data: string;
      /** @description The base64-url encoded encrypted key */
      encrypted_key: string;
      /** @description This is a Base64Url-encoded value that provides evidence of the integrity and authenticity of the ciphertext, Initialization Vector, and Additional Authenticated Data */
      auth_tag: string;
      /** @description This is a Base64Url-encoded random bit string to be used as the Initialization Vector (IV) when encrypting the plaintext to produce the ciphertext. The size of the IV depends on the encryption algorithm used. */
      iv: string;
    };
    /**
     * @description Describes an error object that is returned to standard post call request. <br>
     * 1. This object shall be sent when any request received by a participant is not parsable or message integrity check fails. <br>
     * 2. This object may be used across all transport protocols to acknowledge the receipt of a message i.e HTTPS, FTP, Messaging etc., <br>"
     */
    Error: {
      /**
       * @description Standard error code
       * @enum {string}
       */
      code?:
        | "err.request.bad"
        | "err.request.unauthorized"
        | "err.request.forbidden"
        | "err.request.not_found"
        | "err.request.timeout"
        | "err.version.not_supported"
        | "err.request.too_many_requests"
        | "err.sender_id.invalid"
        | "err.sender_uri.invalid"
        | "err.receiver_id.invalid"
        | "err.signature.missing"
        | "err.signature.invalid"
        | "err.encryption.invalid"
        | "err.service.unavailable";
      /** @description message to describe above error code */
      message?: string;
    };
    /**
     * @description 1. Frequency at which subscribed services should be notified.
     * 2. start_time, end_time represent data range where the notification frequency is applicable
     */
    EventFrequency: {
      start_time: components["schemas"]["DateTime"];
      end_time: components["schemas"]["DateTime"];
      /**
       * @description Frequency at which notification is required. This will be in the form of cron expression.
       * Example - "0 0 0 5,15 * ? *"
       * which says At 00:00:00am, on the 5th and 15th day, every month
       */
      frequency: string;
    };
    /**
     * @description Condition in an expression
     * @example and
     * @enum {string}
     */
    ExpCondition: "and" | "or" | "not";
    /**
     * @description Operator in an expression
     * @example eq
     * @enum {string}
     */
    ExpOperator: "gt" | "lt" | "eq" | "ge" | "le";
    /** @description Expression */
    Expression: {
      /**
       * @description expression seq number for correlation
       * @example 1
       */
      seq_num: number;
      /** @description attribute name */
      attribute_name: string;
      operator: components["schemas"]["ExpOperator"];
      attribute_value: components["schemas"]["AttributeValue"];
    };
    /** @description list of attributes with matching conditions */
    ExpressionList: unknown;
    /** @description Expression result */
    ExpressionResult: {
      /**
       * @description expression seq number for correlation
       * @example 1
       */
      seq_num: number;
      /**
       * @example y
       * @enum {string}
       */
      result: "y" | "n";
    };
    ExpressionResultList: unknown;
    ExpressionWithCondition: {
      expression1: components["schemas"]["Expression"];
      condition?: components["schemas"]["ExpCondition"];
      expression2?: components["schemas"]["Expression"];
    };
    ExpressionWithConditionList: unknown;
    /** @description File info. Used in file upload feature using HTTPS */
    FileInfo: {
      /** @description G2P Connect specific actions. Usually verb from the URI should go here to help store and fwd kind of processing requirements. */
      action: string;
      /**
       * Format: binary
       * @description Disbursement instruction file representing Disburse or OnDisburse end point elements i.e signature/header/message entities as a file record
       */
      fileName: string;
      /**
       * @description File content format. e.g json, csv, etc.,
       * @default json
       * @example csv
       */
      fileFormat?: string;
    };
    /**
     * @description indicates language code. G2P Connect supports country codes as per ISO 639.3 standard
     * @example en
     */
    LanguageCode: string;
    LatLong: {
      /** @example 11°24'12.2"N */
      latitude?: string;
      /** @example 88°50'26.5"E */
      longitude?: string;
    };
    /** @description Message header */
    "MsgCallbackHeader_V1.0.0": {
      /**
       * @description Messaing protocol specification version being used
       * @example 0.1.0
       */
      version?: string;
      /**
       * @description 1. Unique message id to communicate between sender and receiver systems to realiable deliver the message over any transport layer i.e https, pub/sub, sftp etc.,
       * 2. The scope of message_id end with successful ack of the message by the receiver.
       * 3. To realy the message between hops, underlying relying parties may consider to store and forward the message with integirty, ie Signature intact.
       *
       * @example 789
       */
      message_id: string;
      message_ts: components["schemas"]["DateTime"];
      /** @description G2P Connect specific action. Usually verb from the URI should go here to help store and fwd kind of processing requirements. */
      action: string;
      status: components["schemas"]["RequestStatus"];
      status_reason_code?: components["schemas"]["MsgHeaderStatusReasonCode"];
      /** @description Status reascon code message, if any, Helps actionanble messaging for system/end users */
      status_reason_message?: string;
      /**
       * @description Total no of requests present in the message request
       * @example 21800
       */
      total_count?: number;
      /**
       * @description No of requests in complteed state. Complete includes success and error requests due to funcational errors
       * @example 50
       */
      completed_count?: number;
      /**
       * @description 1. sender_id registered with the receiving system or gateway.
       * 2. Used for authorization, encryption, digital sign verfication, etc.,
       *
       * @example civilregistry.example.org
       */
      sender_id?: string;
      /**
       * @description receiver id registered with the calling system. Used for authorization, encryption, digital sign verfication, etc., functions.
       * @example registry.example.org
       */
      receiver_id?: string;
      /**
       * @description 1. If message is encrypted, Ecnryption alog used for receiver to decrypt the message payload
       * 2. example: aes, rsa, aes_rsa, ecc, other
       *
       * @example [
       *   "aes",
       *   "rsa",
       *   "aes+rsa",
       *   "ecc",
       *   "other"
       * ]
       */
      encryption_algo?: string;
    };
    /** @description Message header */
    "MsgHeader_V1.0.0": {
      /**
       * @description Messaing protocol specification version being used
       * @example 0.1.0
       */
      version?: string;
      /**
       * @description 1. Unique message id to communicate between sender and receiver systems to realiable deliver the message over any transport layer i.e https, pub/sub, sftp etc.,
       * 2. The scope of message_id end with successful ack of the message by the receiver.
       * 3. To realy the message between hops, underlying relying parties may consider to store and forward the message with integirty, ie Signature intact.
       *
       * @example 123
       */
      message_id: string;
      message_ts: components["schemas"]["DateTime"];
      /** @description G2P Connect specific action. Usually verb from the URI. Helps in sync, async, store/fwd processing. Helps identity payload type in message property. */
      action: string;
      /**
       * @description 1. sender_id registered with the receiving system or gateway.
       * 2. Used for authorization, encryption, digital sign verfication, etc.,
       *
       * @example spp.example.org
       */
      sender_id: string;
      /**
       * Format: uri
       * @description 1. sender url to accept callbacks. Applicable only for async communications and if response ack_status is ACK.
       * 2. Default uri is assumed to be configred on the gateway as part of sender/receiver onboarding.
       * 3. For SFTP based communications, this shall be set to server/folder details.
       *
       * @example https://spp.example.org/{namespace}/callback/on-search
       */
      sender_uri?: string;
      /**
       * @description receiver id registered with the calling system. Used for authorization, encryption, digital sign verfication, etc., functions.
       * @example pymts.example.org
       */
      receiver_id?: string;
      /**
       * @description Total no of requests present in the message request
       * @example 21800
       */
      total_count: number;
      /**
       * @description 1. If message is encrypted, Ecnryption alog used for receiver to decrypt the message payload
       * 2. example: aes, rsa, aes_rsa, ecc, other
       *
       * @example [
       *   "aes",
       *   "rsa",
       *   "aes+rsa",
       *   "ecc",
       *   "other"
       * ]
       */
      encryption_algo?: string;
    };
    /**
     * @description Message header related common status reason codes
     * @enum {string}
     */
    MsgHeaderStatusReasonCode:
      | "rjct.version.invalid"
      | "rjct.message_id.duplicate"
      | "rjct.message_ts.invalid"
      | "rjct.action.invalid"
      | "rjct.action.not_supported"
      | "rjct.total_count.invalid"
      | "rjct.total_count.limit_exceeded"
      | "rjct.errors.too_many";
    /**
     * @description Signature of {header}+{message} body verified using sender's signing public key
     * @example Signature:  namespace="g2p", kidId="{sender_id}|{unique_key_id}|{algorithm}", algorithm="ed25519", created="1606970629", expires="1607030629", headers="(created) (expires) digest", signature="Base64(signing content)
     */
    MsgSignature: string;
    /** @description Pagination definition, count starts with 1 */
    Pagination: {
      /**
       * Format: int32
       * @example 2000
       */
      page_size: number;
      /**
       * Format: int32
       * @example 5
       */
      page_number: number;
      /**
       * Format: int32
       * @example 24250
       */
      total_count: number;
    };
    /** @description Pagination definition, count starts with 1 */
    PaginationRequest: {
      /**
       * Format: int32
       * @example 2000
       */
      page_size: number;
      /**
       * Format: int32
       * @default 1
       * @example 5
       */
      page_number?: number;
    };
    /**
     * @description Unique reference_id set by txn initiating system for each request in a batch
     * @example 12345678901234567890
     */
    ReferenceId: string;
    ReferenceIdList: unknown;
    /**
     * @description Request (e.g disburse, link, unlink, resolve, issue, search, verify, etc.,) status: <br> 1. rcvd: Received; Request received <br> 2. pdng: Pending; Request initiated <br> 3. succ: Success; Request successful <br> 4. rjct: Rejected; Request rejected
     * @enum {string}
     */
    RequestStatus: "rcvd" | "pdng" | "succ" | "rjct";
    /** @description Sorting definition */
    SearchSort: {
      /** @description attribute name */
      attribute_name?: string;
      /** @enum {string} */
      sort_order?: "asc" | "desc";
    };
    SearchSortList: unknown;
    /**
     * @description Unique transaction_id set by txn initiating system (i.e sender) to co-relate requests across processing systems/service end points
     * @example 12345678901234567000
     */
    TransactionId: string;
  };
  responses: {
    /** @description HTTP layer error details */
    HttpErrorResponse: {
      content: {
        "application/json": {
          error?: {
            /** @description error code */
            code?: string;
            /** @description error message */
            message?: string;
          };
        };
      };
    };
    /** @description Acknowledgement of message received after successful validation of message and signature */
    Response: {
      content: {
        "application/json": {
          message?: {
            ack_status?: components["schemas"]["Ack"];
            timestamp?: components["schemas"]["DateTime"];
            error?: components["schemas"]["Error"];
          };
        };
      };
    };
  };
  parameters: {
    /** @description Default value: en */
    "accept-language"?: string;
    /** @description request timestamp in HTTP Date format - Tue, 06 Mar 2020 21:00:00 GMT */
    timestamp: string;
    /** @description Unique transaction id set by sender as part of the initiating request to co-relate requests across interface end point, sessions, etc., For e.g transaction_id be used to find status using GET call or correlate the transaction as part of the callback call. */
    transaction_id: string;
    /** @description Optional. Defualt is false, If summary_only set to true then only the message header with stats / status to be returend as part of implementation */
    summary_only: boolean;
    /** @description <br> 1. Beneficiary id is a normative represenation represented as id@id-provider <br> 2. This will enumerate foundational and functioanl id's to easily resolvable addressess <br> 3. Few examples: <br> - id@id-provider e.g 12345@mosip, 12345@PhilID <br> - id@civil-registry.issuing-agency e.g 12345@crvs.rwanda, 12345@ejanma.karnataka - id@functional-identifier.issuing-agency e.g 12345@voter.Rwanda, 12345@DL.karnataka, 12345@fruits.karnataka <br> Note: id-provider should be made configurable and DPGs operating should adapt to the local jurisdiction and policies. e.g fruits.karnataka represents farmer registry in karnataka state govt.<br> */
    beneficiary_id: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * /registry/search
   * @description Search person(s) in registry using identifier or custome attributes
   */
  post_reg_search: {
    requestBody: {
      content: {
        "application/json": {
          signature?: components["schemas"]["MsgSignature"];
          header: components["schemas"]["MsgHeader_V1.0.0"] & {
            /** @enum {unknown} */
            action?: "search";
          };
          /** @description The search data using which registry search to be performed */
          message: components["schemas"]["SearchRequest"];
          // | components["schemas"]["EncryptedMessage"];
          // TODO: Implement EncryptedMessages
        };
        "multipart/form-data": components["schemas"]["FileInfo"] & {
          /** @enum {unknown} */
          action?: "search";
        };
      };
    };
    responses: {
      401: components["responses"]["HttpErrorResponse"];
      403: components["responses"]["HttpErrorResponse"];
      500: components["responses"]["HttpErrorResponse"];
      default: components["responses"]["Response"];
    };
  };
  /**
   * /registry/on-search
   * @description Search results through callback
   */
  "post_reg_on-search": {
    requestBody: {
      content: {
        "application/json": {
          signature?: components["schemas"]["MsgSignature"];
          header: components["schemas"]["MsgCallbackHeader_V1.0.0"] & {
            /** @enum {unknown} */
            action?: "on-search";
          };
          message?: components["schemas"]["SearchResponse"];
          //  | components["schemas"]["EncryptedMessage"];
        };
        "multipart/form-data": components["schemas"]["FileInfo"] & {
          /** @enum {unknown} */
          action?: "on-search";
        };
      };
    };
    responses: {
      401: components["responses"]["HttpErrorResponse"];
      403: components["responses"]["HttpErrorResponse"];
      500: components["responses"]["HttpErrorResponse"];
      default: components["responses"]["Response"];
    };
  };
  /**
   * /registry/subscribe
   * @description Subscribe to a life event with registry
   */
  post_reg_subscribe: {
    requestBody: {
      content: {
        "application/json": {
          signature?: components["schemas"]["MsgSignature"];
          header: components["schemas"]["MsgHeader_V1.0.0"] & {
            /** @enum {unknown} */
            action?: "subscribe";
          };
          /** @description Subscription request which contaion query with frequency and other info on which notification to be sent by registry to subscriber */
          message: components["schemas"]["SubscribeRequest"];
          //  | components["schemas"]["EncryptedMessage"];
        };
        "multipart/form-data": components["schemas"]["FileInfo"] & {
          /** @enum {unknown} */
          action?: "subscribe";
        };
      };
    };
    responses: {
      401: components["responses"]["HttpErrorResponse"];
      403: components["responses"]["HttpErrorResponse"];
      500: components["responses"]["HttpErrorResponse"];
      default: components["responses"]["Response"];
    };
  };
  /**
   * /registry/notify
   * @description Registry to notify a life event to subscrbiers
   */
  post_reg_notify: {
    requestBody: {
      content: {
        "application/json": {
          signature?: components["schemas"]["MsgSignature"];
          header: components["schemas"]["MsgCallbackHeader_V1.0.0"] & {
            /** @enum {unknown} */
            action?: "notify";
          };
          message?: components["schemas"]["NotifyEventRequest"];
          //  | components["schemas"]["EncryptedMessage"];
        };
        "multipart/form-data": components["schemas"]["FileInfo"] & {
          /** @enum {unknown} */
          action?: "notify";
        };
      };
    };
    responses: {
      401: components["responses"]["HttpErrorResponse"];
      403: components["responses"]["HttpErrorResponse"];
      500: components["responses"]["HttpErrorResponse"];
      default: components["responses"]["HttpErrorResponse"];
    };
  };
  /**
   * /registry/txn/status
   * @description Perform async status check of previous civil registry transanctions using transaction_id and/or reference_id(s)
   */
  post_reg_txnstatus: {
    requestBody: {
      content: {
        "application/json": {
          signature?: components["schemas"]["MsgSignature"];
          header: components["schemas"]["MsgHeader_V1.0.0"] & {
            /** @enum {unknown} */
            action?: "subscribe" | "notify" | "on-search";
          };
          message: components["schemas"]["TxnStatusRequest"];
          //  | components["schemas"]["EncryptedMessage"];
        };
        "multipart/form-data": components["schemas"]["FileInfo"] & {
          /** @enum {unknown} */
          action?: "subscribe" | "notify" | "on-search";
        };
      };
    };
    responses: {
      401: components["responses"]["HttpErrorResponse"];
      403: components["responses"]["HttpErrorResponse"];
      500: components["responses"]["HttpErrorResponse"];
      default: components["responses"]["Response"];
    };
  };
  /**
   * /registry/txn/on-status
   * @description Response to async status check of previous civil registrt transanctions using callback
   */
  "post_reg_on-txnstatus": {
    requestBody: {
      content: {
        "application/json": {
          signature?: components["schemas"]["MsgSignature"];
          header: components["schemas"]["MsgCallbackHeader_V1.0.0"] & {
            /** @enum {unknown} */
            action?: "subscribe" | "notify" | "on-search";
          };
          message?: components["schemas"]["TxnStatusResponse"];
          //  | components["schemas"]["EncryptedMessage"];
        };
        "multipart/form-data": components["schemas"]["FileInfo"] & {
          /** @enum {unknown} */
          action?: "subscribe" | "notify" | "on-search";
        };
      };
    };
    responses: {
      401: components["responses"]["HttpErrorResponse"];
      403: components["responses"]["HttpErrorResponse"];
      500: components["responses"]["HttpErrorResponse"];
      default: components["responses"]["Response"];
    };
  };
  /**
   * /registry/sync/search
   * @description Search person(s) in registry using identifier or custome attributes
   */
  post_reg_sync_search: {
    requestBody: {
      content: {
        "application/json": {
          signature?: components["schemas"]["MsgSignature"];
          header: components["schemas"]["MsgHeader_V1.0.0"] & {
            /** @enum {unknown} */
            action?: "search";
          };
          /** @description The search data using which registry search to be performed */
          message: components["schemas"]["SearchRequest"];
          //  | components["schemas"]["EncryptedMessage"];
        };
      };
    };
    responses: {
      401: components["responses"]["HttpErrorResponse"];
      403: components["responses"]["HttpErrorResponse"];
      500: components["responses"]["HttpErrorResponse"];
      /** @description Registry search response */
      default: {
        content: {
          "application/json": {
            signature?: components["schemas"]["MsgSignature"];
            header: components["schemas"]["MsgCallbackHeader_V1.0.0"] & {
              /** @enum {unknown} */
              action?: "on-search";
            };
            message?: components["schemas"]["SearchResponse"];
            //  | components["schemas"]["EncryptedMessage"];
          };
        };
      };
    };
  };
  /**
   * /registry/sync/subscriptions
   * @description To retrive list of subscriptions
   */
  post_reg_sync_subscriptions: {
    requestBody: {
      content: {
        "application/json": {
          signature?: components["schemas"]["MsgSignature"];
          header: components["schemas"]["MsgHeader_V1.0.0"] & {
            /** @enum {unknown} */
            action?: "fetch_subscriptions";
          };
          /** @description To perform search based on registry type or event type */
          message: components["schemas"]["FetchSubscriptionsRequest"];
          //  | components["schemas"]["EncryptedMessage"];
        };
      };
    };
    responses: {
      401: components["responses"]["HttpErrorResponse"];
      403: components["responses"]["HttpErrorResponse"];
      500: components["responses"]["HttpErrorResponse"];
      /** @description Subscription list response */
      default: {
        content: {
          "application/json": {
            signature?: components["schemas"]["MsgSignature"];
            header: components["schemas"]["MsgCallbackHeader_V1.0.0"];
            message?: components["schemas"]["FetchSubscriptionsResponse"];
            //  | components["schemas"]["EncryptedMessage"];
          };
        };
      };
    };
  };
  /**
   * /registry/sync/unsubscribe
   * @description Unsubscribe to a life event with registry
   */
  post_reg_sync_unsubscribe: {
    requestBody: {
      content: {
        "application/json": {
          signature?: components["schemas"]["MsgSignature"];
          header: components["schemas"]["MsgHeader_V1.0.0"] & {
            /** @enum {unknown} */
            action?: "unsubscribe";
          };
          /** @description The unsubscribe request that contain subscription ids which to be removed from subscription list */
          message: components["schemas"]["UnSubscribeRequest"];
          //  | components["schemas"]["EncryptedMessage"];
        };
        "multipart/form-data": components["schemas"]["FileInfo"] & {
          /** @enum {unknown} */
          action?: "unsubscribe";
        };
      };
    };
    responses: {
      401: components["responses"]["HttpErrorResponse"];
      403: components["responses"]["HttpErrorResponse"];
      500: components["responses"]["HttpErrorResponse"];
      /** @description Unsubscribe response */
      default: {
        content: {
          "application/json": {
            signature?: components["schemas"]["MsgSignature"];
            header: components["schemas"]["MsgCallbackHeader_V1.0.0"];
            message: components["schemas"]["UnSubscribeResponse"];
            //  | components["schemas"]["EncryptedMessage"];
          };
        };
      };
    };
  };
  /**
   * /registry/sync/txn/status
   * @description Perform async status check of previous civil registry transanctions using transaction_id and/or reference_id(s)
   */
  post_reg_sync_txnstatus: {
    requestBody: {
      content: {
        "application/json": {
          signature?: components["schemas"]["MsgSignature"];
          header: components["schemas"]["MsgHeader_V1.0.0"] & {
            /** @enum {unknown} */
            action?: "search" | "subscribe";
          };
          message: components["schemas"]["TxnStatusRequest"];
          //  | components["schemas"]["EncryptedMessage"];
        };
      };
    };
    responses: {
      401: components["responses"]["HttpErrorResponse"];
      403: components["responses"]["HttpErrorResponse"];
      500: components["responses"]["HttpErrorResponse"];
      /** @description Transaction status check response */
      default: {
        content: {
          "application/json": {
            signature?: components["schemas"]["MsgSignature"];
            header: components["schemas"]["MsgCallbackHeader_V1.0.0"] & {
              /** @enum {unknown} */
              action?: "on-search" | "notify";
            };
            message?: components["schemas"]["TxnStatusResponse"];
            //  | components["schemas"]["EncryptedMessage"];
          };
        };
      };
    };
  };
}
